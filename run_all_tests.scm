;; run_all_tests.scm
;; Main file to load all components and run example tests for the TLS project.
;; Includes tests for 'let' and demonstrates various interpreter features.

(display "Loading Shared Definitions (shared_definitions.scm)...\n")
(load "shared_definitions.scm")
(newline)

;; --- Part 1.1: Original TLS Interpreter (TLS-LET) ---
(display "Loading Original TLS Interpreter (part_1.1_interpreter_original.scm)...\n")
(load "part_1.1_interpreter_original.scm")
(newline)

(display "--- Part 1.1: TLS Interpreter (Original Env) Examples ---\n")
(display "value '10 -> ") (display (value '10)) (newline)
(display "value '(add1 5) -> ") (display (value '(add1 5))) (newline)
(display "value '((lambda (x) (add1 x)) 20) -> ") (display (value '((lambda (x) (add1 x)) 20))) (newline)
(display "value '(let ((x 10)) (add1 x)) -> ") (display (value '(let ((x 10)) (add1 x)))) (newline)
(display "value '(let ((x 10) (y 20)) (cons x y)) -> ") (display (value '(let ((x 10) (y 20)) (cons x y)))) (newline)
(display "value '(let ((x 10)) (let ((y (add1 x))) (cons x y))) -> ")
(display (value '(let ((x 10)) (let ((y (add1 x))) (cons x y))))) (newline)
(display "value '(let ((x 10)) (let ((x 20) (y (add1 x))) y)) ; y uses inner x=20 -> ")
(display (value '(let ((x 10)) (let ((x 20) (y (add1 x))) y)))) (newline)
(display "value '(let ((x 10) (y (add1 5))) (let ((x y) (z (add1 x))) (cons y z))) -> ")
(display (value '(let ((x 10) (y (add1 5))) (let ((x y) (z (add1 x))) (cons y z))))) (newline)
(display "value '(let ((x 1)) (let ((f (lambda (y) (cons x y)))) (f 2))) ; lexical scope for x in f -> ")
(display (value '(let ((x 1)) (let ((f (lambda (y) (cons x y)))) (f 2))))) (newline)
(display "value '(let ((x 10)) (add1 x) (sub1 x)) ; only sub1 x value matters -> ")
(display (value '(let ((x 10)) (add1 x) (sub1 x)))) (newline)
(display "value '((lambda (outer-x) (let ((inner-x (add1 outer-x))) (cons inner-x outer-x)) ) 5) -> ")
(display (value '((lambda (outer-x) (let ((inner-x (add1 outer-x))) (cons inner-x outer-x)) ) 5))) (newline)
(display "value '(let ((a 100)) ((lambda (a) (add1 a)) (let ((a 10)) (add1 a)))) -> ")
(display (value '(let ((a 100)) ((lambda (a) (add1 a)) (let ((a 10)) (add1 a)))))) (newline)
(display "value '(let () (add1 5)) -> ") (display (value '(let () (add1 5)))) (newline)
(display "value '(let ((x 1))) -> ") (display (value '(let ((x 1))))) (newline) ; Will evaluate to (quote tls-undefined-let-body-value)
(newline)


;; --- Part 1.2: TLS Syntax Checker (TLS-LET) ---
(display "Loading TLS Syntax Checker (part_1.2_syntax_checker.scm)...\n")
(load "part_1.2_syntax_checker.scm")
(newline)

(define (test-syntax description exp expected-is-valid?)
  (display description)
  (let ((result (check-tls-syntax exp)))
    (if (eq? result #t)
        (if expected-is-valid? (display " -> OK (Valid)\n")
            (display " -> FAILED (Should be Invalid, but reported Valid)\n"))
        (if expected-is-valid?
            (begin (display " -> FAILED (Should be Valid, but reported: ") (display result) (display ")\n"))
            (begin (display " -> OK (Invalid as expected: ") (display result) (display ")\n"))))))

(display "--- Part 1.2: TLS Syntax Checker Examples ---\n")
(test-syntax "Integer literal:" 1 #t)
(test-syntax "Boolean literal:" #f #t)
(test-syntax "Primitive name as expression:" 'cons #t)
(test-syntax "Quoted symbol:" '(quote abc) #t)
(test-syntax "Simple lambda:" '(lambda (x) x) #t)
(test-syntax "Simple cond:" '(cond (#t 1)) #t)
(test-syntax "Primitive application (cons):" '(cons 1 2) #t)
(test-syntax "Lambda application:" '((lambda (x) (add1 x)) 10) #t)
(test-syntax "Valid let: " '(let ((x 10)) (add1 x)) #t)
(test-syntax "Valid let multiple bindings: " '(let ((x 10) (y 20)) (cons x y)) #t)
(test-syntax "Valid nested let: " '(let ((x 10)) (let ((y (add1 x))) (cons x y))) #t)
(test-syntax "Valid let no bindings: " '(let () (add1 10)) #t)
(test-syntax "Valid let multiple body exprs: " '(let ((x 1)) (add1 x) (sub1 x)) #t)
(test-syntax "Invalid let (no body): " '(let ((x 1))) #f)
(test-syntax "Invalid let (bindings not list): " '(let x (add1 x)) #f)
(test-syntax "Invalid let (binding not pair): " '(let ((x)) (add1 x)) #f)
(test-syntax "Invalid let (binding var not symbol): " '(let (((1) 10)) x) #f)
(test-syntax "Invalid let (binding val expr unbound): " '(let ((x y)) x) #f)
(test-syntax "Invalid let (body unbound): " '(let ((x 10)) z) #f)
(test-syntax "Invalid let (duplicate var): " '(let ((x 10) (x 20)) x) #f)
(test-syntax "Invalid let (var is keyword): " '(let ((let 10)) let) #f)
(test-syntax "Non-integer number:" 17/16 #f)
(test-syntax "Empty list expression:" '() #f)
(test-syntax "Malformed quote (too few):" '(quote) #f)
(test-syntax "Lambda formal not symbol:" '(lambda (1) x) #f)
(test-syntax "Unbound variable:" 'my-unbound-var #f)
(test-syntax "Keyword as variable (quote):" 'quote #f)
(test-syntax "(17 cond 18 lambda x):" '(17 cond 18 lambda x) #f)
(newline)


;; --- Part 1.3: TLS Interpreter with List-of-Bindings Environment (TLS-LET) ---
(display "Loading TLS Interpreter with List-of-Bindings Env (part_1.3_interpreter_list_env.scm)...\n")
(load "part_1.3_interpreter_list_env.scm")
(newline)

(display "--- Part 1.3: TLS Interpreter (List-of-Bindings Env) Examples ---\n")
(display "value '10 -> ") (display (value '10)) (newline)
(display "value '(add1 5) -> ") (display (value '(add1 5))) (newline)
(display "value '((lambda (x) (add1 x)) 20) -> ") (display (value '((lambda (x) (add1 x)) 20))) (newline)
(display "value '(let ((x 10)) (add1 x)) -> ") (display (value '(let ((x 10)) (add1 x)))) (newline)
(display "value '(let ((x 10) (y 20)) (cons x y)) -> ") (display (value '(let ((x 10) (y 20)) (cons x y)))) (newline)
(display "value '(let ((x 10)) (let ((y (add1 x))) (cons x y))) -> ")
(display (value '(let ((x 10)) (let ((y (add1 x))) (cons x y))))) (newline)
(newline)

(display "--- All Tests/Examples Complete ---\n")